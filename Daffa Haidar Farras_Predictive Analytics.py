# -*- coding: utf-8 -*-
"""Predictive Analytics : Diabetes Diese.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f-uDycTWg8SH0rXPaVLNjWKSGuWKt5Mw

# Predictive Analytic: Diabetes disease
- Nama : Daffa Haidar Farras
- Username : daffa_haidar
- Email :  daffahaidarfarras@gmail.com

# Proyek Analisis Data: Prediksi Risiko Diabetes

Pada proyek ini, saya akan menganalisis dataset yang terkait faktor-faktor risiko Diabetes. Tujuan proyek adalah untuk memahami hubungan antara fitur dalam dataset dan variabel target **Outcome**, serta membangun visualisasi untuk membantu interpretasi data.

Link Dataset : https://www.kaggle.com/datasets/nanditapore/healthcare-diabetes

## Domain Proyek (Kesehatan)

Diabetes melitus adalah salah satu penyakit tidak menular dengan tingkat penderita yang terus meningkat di dunia, termasuk Indonesia. Berdasarkan data dari International Diabetes Federation (IDF), jumlah penderita diabetes di Indonesia sudah mencapai 19,5 juta pada tahun 2021, dengan jumlah ini Indonesia menjadi salah satu negara dengan angka penderita diabetes tertinggi di dunia. Diabetes menjadi penyebab utama komplikasi kesehatan serius, seperti penyakit gagal ginjal, kardiovaskular, dan neuropati, yang dapat memberikan dampak pada kualitas hidup individu serta dapat memberi beban pada sistem layanan kesehatan nasional. Peningkatan penderita diabetes di Indonesia disebabkan oleh beberapa faktor, termasuk perubahan gaya hidup, pola makan, kurangnya aktivitas fisik, dan kurangnya kesadaran petingnya pencegahan diabetes. Diabetes yang merupakan penyakit kronis memerlukan penanganan jangka panjang, penanganannya berupa diet, gula darah, olahraga, dan pengobatan rutin.

## Business Understanding

### Problem Statements
Rumusan masalah dari masalah latar belakang diatas adalah :

1. Bagaimana memprediksi penyakit diabetes sejak dini berdasarkan data kesehatan individu?
2. Bagaimana menidentifikasi fitur atau faktor utama yang bisa berkontribusi terhadap kemungkinana seseorang dapat menderita penyakit diabetes?
3. Bagaimana membangun model machine learning yang bisa diandalkan untuk bisa membantu pengambilan keputusan diagnosis?

### Goals
Berdasarkan problem statements, berikut tujuan yang ingin dicapai pada proyek ini :

1. Mengembangkan model machine learning yang bisa mengklasifikasi seseorang menderita diabetes atau tidak.
2. Mengetahui fitur atau faktor yang bisa berkontribusi terhadap kemungkinana seseorang dapat menderita penyakit diabetes.
3. Menemukan model terbaik yang bisa mengklasifikasi penderita diabetes.

### Solution Statement
1. Membangun dan mengembangkan model machine learning yang dapat mengklasifikasikan risiko penyakit diabetes.
2. Melakukan sebuah analisis pada data untuk bisa memahami fitur-fitur yang mempengaruhi seseorang dapat terkena penyakit diabetes, dengan menerapkan teknik visualisasi data dan deskripsi statistik data mengetahui korelasi antar fitur dan memahami hubungan antara data target (label) dan fitur lainnya.
3. Menggunakan confusion matrix dan f1 score pada masing-masing model machine learning untuk menemukan model terbaik berdasarkan akurasi tertinggi.

## Data Understanding

### Deskripsi:
Dataset ini berisi berbagai atribut kesehatan yang dikumpulkan secara teliti untuk membantu pengembangan model prediktif dalam mengidentifikasi risiko diabetes. Tujuannya adalah mendorong kolaborasi dan inovasi dalam komunitas data science untuk mendukung diagnosis dini dan pengobatan diabetes yang lebih personal.

### Kolom/Fitur
- Id: Identifikasi unik untuk setiap data.
- Pregnancies: Jumlah kehamilan.
- Glucose: Konsentrasi glukosa plasma selama 2 jam dalam tes toleransi glukosa oral.
- BloodPressure: Tekanan darah diastolik (mm Hg).
- SkinThickness: Ketebalan lipatan kulit triseps (mm).
- Insulin: Kadar insulin serum setelah 2 jam (mu U/ml).
- BMI: Indeks massa tubuh (berat dalam kg / tinggi dalam mÂ²).
- DiabetesPedigreeFunction: Fungsi silsilah diabetes, nilai genetik terkait risiko diabetes.
- Age: Usia (tahun).
- Outcome: Klasifikasi biner yang menunjukkan ada (1) atau tidak adanya (0) diabetes.

### Usability dan Jumlah Baris
- Usability : 10.00
- Jumlah Baris : 2768

# Import Library
"""

# Install kagglehub
pip install kagglehub

import pandas as pd
import kagglehub
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, f1_score, recall_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import numpy as np

# Model
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score

from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import AdaBoostClassifier

"""# Load Dataset"""

# Download latest version
path = kagglehub.dataset_download("nanditapore/healthcare-diabetes")

print("Path to dataset files:", path)

# Path disesuaikan dengan path download
path = "/root/.cache/kagglehub/datasets/nanditapore/healthcare-diabetes/versions/1/Healthcare-Diabetes.csv"

data = pd.read_csv(path)
data.head()

"""# Data Understanding

**Data Understanding**

Pada tahap ini, akan memahami struktur dataset, termasuk:
- Jumlah baris dan kolom.
- Jenis data (numerik/kategorik).
- Distribusi nilai.
"""

# Cek informasi dataset
data.info()

# Cek ringkasan statistik deskriptif
data.describe()

# Cek jumlah baris dan kolom
data.shape

"""# Cek Duplikat

**Cek Duplikat**

Untuk mengecek apakah ada data yang terduplikat
"""

# Cek Duplikat
print(data.duplicated().sum())

"""# Missing Value

**Missing Value**

Untuk mengecek apakah ada data yang hilang
"""

# Cek missing value
print(data.isnull().sum())

"""# Menangani Outlier

Untuk Menangani Outlier dan nilai yang tidak masuk akal dalam dunia medis. sehingga, data akan dibuat logis dan dapat diterima dalam dunia media.
"""

import matplotlib.pyplot as plt

numerical_features = data.drop(['Id','Outcome'], axis=1)
n_features = len(numerical_features)

# Atur jumlah kolom dan baris subplot
n_cols = 4
n_rows = (n_features + n_cols - 1) // n_cols

fig, axes = plt.subplots(n_rows, n_cols, figsize=(n_cols*4, n_rows*4))
axes = axes.flatten()

for i, col in enumerate(numerical_features):
    axes[i].boxplot(data[col].dropna())
    axes[i].set_title(col)
    axes[i].tick_params(axis='x', rotation=45)

# Hapus subplot kosong jika ada
for j in range(i+1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

# Cek jumlah data yang berisikan 0
print("Data yang 0 ada :",(data == 0).sum())

"""Karena Glucose, BloodPressure, BMI, dan SkinThickness memiliki nilai 0 yang secara medis tidak masuk akal, maka cara untuk menangani ini adalah dengan menggunakan nilai rata-rata dari masing-masing fitur."""

# Ubah nilai 0 di BMI menjadi nilai rata-rata pada fiturnya

data['BMI'] = data['BMI'].replace(0, data['BMI'].astype(float).mean())

# Ubah nilai 0 di Glucose menjadi nilai rata-rata pada fiturnya

data['Glucose'] = data['Glucose'].replace(0, data['Glucose'].astype(float).mean())

# Ubah nilai 0 di SkinThickness menjadi nilai rata-rata pada fiturnya

data['SkinThickness'] = data['SkinThickness'].replace(0, data['SkinThickness'].astype(float).mean())

# Ubah nilai 0 di BloodPressure menjadi nilai rata-rata pada fiturnya

data['BloodPressure'] = data['BloodPressure'].replace(0, data['BloodPressure'].astype(float).mean())

# Tangani outlier untuk BMI (Outcome = 0)

bmi_mean = data[data['Outcome'] == 0]['BMI'].mean()
data.loc[(data['Outcome'] == 0) & ((data['BMI'] < 15) | (data['BMI'] > 50)), 'BMI'] = bmi_mean

# Tangani outlier untuk Glucose (Outcome = 0)

glucose_mean = data[data['Outcome'] == 0]['Glucose'].mean()
data.loc[(data['Outcome'] == 0) & ((data['Glucose'] < 50) | (data['Glucose'] > 170)), 'Glucose'] = glucose_mean

print(data.info())          # Informasi lengkap tentang dataset

data.describe()   # Distribusi nilai.

"""# Univariate Analysis

**Univariate Analysis**

Melakukan analisis terhadap fitur-fitur di dataset secara sendiri-sendiri
"""

# Menghasilkan histogram untuk semua kolom dalam dataset.
data.hist(bins=50, figsize=(20,15))
plt.show()

"""## Pregnancies

Melakukan analisis terhadap fitur Pregnancies
"""

# Distribusi Pregnancies

count = data['Pregnancies'].value_counts()
percent = 100*data['Pregnancies'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title="Pregnancies");

"""## Glucose

Melakukan analisis terhadap fitur Glucose
"""

# Distribusi Glucose
count = data['Glucose'].value_counts()
percent = 100*data['Glucose'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
top10 = df['jumlah sampel'].head(10)
top10.plot(kind='bar', title="Top 10 Glucose");

"""## BloodPressure

Melakukan analisis terhadap fitur BloodPressure
"""

# Distribusi BloodPressure
count = data['BloodPressure'].value_counts()
percent = 100*data['BloodPressure'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
top10 = df['jumlah sampel'].head(10)
top10.plot(kind='bar', title="Top 10 BloodPressure");

"""## SkinThickness

Melakukan analisis terhadap fitur SkinThickness
"""

# Distribusi SkinThickness
count = data['SkinThickness'].value_counts()
percent = 100*data['SkinThickness'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
top10 = df['jumlah sampel'].head(10)
top10.plot(kind='bar', title="Top 10 SkinThickness");

"""## Insulin

Melakukan analisis terhadap fitur Insulin
"""

# Distribusi Insulin
count = data['Insulin'].value_counts()
percent = 100*data['Insulin'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
top10 = df['jumlah sampel'].head(10)
top10.plot(kind='bar', title="Top 10 Insulin");

"""## BMI

Melakukan analisis terhadap fitur BMI
"""

# Distribusi BMI
count = data['BMI'].value_counts()
percent = 100*data['BMI'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
top10 = df['jumlah sampel'].head(10)
top10.plot(kind='bar', title="Top 10 BMI");

"""## DiabetesPedigreeFunction

Melakukan analisis terhadap fitur DiabetesPedigreeFunction
"""

# Distribusi DiabetesPedigreeFunction
count = data['DiabetesPedigreeFunction'].value_counts()
percent = 100*data['DiabetesPedigreeFunction'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
top10 = df['jumlah sampel'].head(10)
top10.plot(kind='bar', title="Top 10 DiabetesPedigreeFunction");

"""## Age

Melakukan analisis terhadap fitur Age
"""

# Distribusi Age
count = data['Age'].value_counts()
percent = 100*data['Age'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
top10 = df['jumlah sampel'].head(10)
top10.plot(kind='bar', title="Top 10 Age");

"""# Multivariate Analysis

## Umur vs Kondisi Diabetes

Melakukan analisis terhadap fitur Umur dan Kondisi Diabetes (Outcome)
"""

plt.figure(figsize=(10,5))  # Menentukan ukuran plot
sns.boxplot(x='Outcome', y='Age',
            data=data,
            palette={'0': 'lightblue', '1': 'khaki'})    # Warna untuk masing-masing outcome
plt.title("Distribusi Umur berdasarkan Kondisi Diabetes")   # Judul plot
plt.xlabel("Outcome")   # Label sumbu x
plt.ylabel("Age")    # Label sumbu y
plt.xticks([0, 1], ['0: Tidak Menderita', '1: Menderita'])   # Keterangan pada sumbu x
plt.show()   # Menampilkan plot

"""Hasil :
1. yang tidak menderita diabetes (Outcome = 0) cenderung memiliki rentang umur yang lebih luas dengan median sekitar 30-an tahun.
2. yang menderita diabetes (Outcome = 1) cenderung memiliki rentang umur lebih tinggi, dengan median di atas 40 tahun.
3. Risiko diabetes sepertinya meningkat pada kelompok usia yang lebih tua.

Kesimpulan:
- Semakin tua umur, semakin besar kemungkinan menderita diabetes.

## BMI vs Kondisi Diabetes

Melakukan analisis terhadap fitur BMI dan Kondisi Diabetes (Outcome)
"""

plt.figure(figsize=(10,5))  # Menentukan ukuran plot
sns.boxplot(x='Outcome', y='BMI',
            data=data,
            palette={'0': 'lightblue', '1': 'khaki'})    # Warna untuk masing-masing outcome
plt.title("Distribusi Umur berdasarkan Kondisi Diabetes")   # Judul plot
plt.xlabel("Outcome")   # Label sumbu x
plt.ylabel("BMI")    # Label sumbu y
plt.xticks([0, 1], ['0: Tidak Menderita', '1: Menderita'])   # Keterangan pada sumbu x
plt.show()   # Menampilkan plot

"""Hasil :
1. yang tidak menderita diabetes memiliki distribusi BMI yang sedikit lebih rendah, dengan median sekitar 30.
2. yang menderita diabetes memiliki distribusi BMI yang lebih tinggi, dengan median sekitar 35, dan terdapat beberapa outlier dengan BMI di atas 50.
3. BMI yang lebih tinggi berhubungan dengan penderita diabetes.

Kesimpulan :
- Kelebihan berat badan atau obesitas (BMI tinggi) berkontribusi terhadap kemungkinan diabetes.

## Glukosa vs Kondisi Diabetes

Melakukan analisis terhadap fitur Glucose dan Kondisi Diabetes (Outcome)
"""

plt.figure(figsize=(10,5))  # Menentukan ukuran plot
sns.boxplot(x='Outcome', y='Glukosa',
            data=data,
            palette={'0': 'lightblue', '1': 'khaki'})    # Warna untuk masing-masing outcome
plt.title("Distribusi Umur berdasarkan Kondisi Diabetes")   # Judul plot
plt.xlabel("Outcome")   # Label sumbu x
plt.ylabel("Glukosa")    # Label sumbu y
plt.xticks([0, 1], ['0: Tidak Menderita', '1: Menderita'])   # Keterangan pada sumbu x
plt.show()   # Menampilkan plot

"""Hasil :
1. yang tidak menderita diabetes memiliki distribusi glukosa yang lebih rendah, dengan median sekitar 110â120.
2. yang menderita diabetes memiliki distribusi glukosa yang lebih tinggi, dengan median sekitar 140â150.
3. Glukosa darah yang lebih tinggi berhubungan dengan penderita diabetes.

Kesimpulan :
- Kadar glukosa darah yang lebih tinggi secara jelas terkait dengan individu yang menderita diabetes.

## Pairplot berdasarkan Outcome

Melakukan analisis hubungan fitur Umur, Glukosa, BMI, Insulin dengan Kondisi Diabetes (Outcome)
"""

# Grafik scatter yang menunjukkan hubungan antar fitur untuk masing-masing kategori Outcome

sns.pairplot(data, hue="Outcome", vars=["Glucose", "BMI", "Age", "Insulin"])

"""## Correlation Matrix

Membuat Correlation Matrix
"""

# Membuat Correlation Matrix
plt.figure(figsize=(14, 10))
correlation_matrix = data.apply(lambda x: pd.factorize(x)[0] if x.dtype == 'object' else x).corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.tight_layout()
plt.show()

"""Mmebuat Correlation Matrix tetapi, dengan menghasilkan angka"""

# Korelasi fitur terhadap Outcome
correlations = data.corr()['Outcome'].abs().sort_values(ascending=False)
display(correlations)

"""Mmebuat Correlation Matrix tetapi, dengan menghasilkan Bar Plot"""

# Menghitung korelasi semua fitur terhadap fitur Outcome
correlation_with_outcome = data.corr()['Outcome'].sort_values(ascending=False)

# Mengabaikan fitur Outcome itu sendiri
correlation_with_outcome = correlation_with_outcome.drop('Outcome')

# Membuat diagram batang
plt.figure(figsize=(10, 6))
sns.barplot(
    y=correlation_with_outcome.index,
    x=correlation_with_outcome.values,
    palette='coolwarm'
)
plt.title('Korelasi fitur yang mempengaruhi diaberes')
plt.xlabel('Correlation')
plt.ylabel('Features')
plt.tight_layout()
plt.show()

"""Kesimpulan :
- Berdasarkan data yang diperolah, menunjukan Fitur utama yang memengaruhi kemungkinan diabetes adalah Glucose, BMI, Age, dan Pregnancies. ke-4 faktor ini sangat berpengaruh pada perhitungan prediksi diabetes.

# Data Preparation

## Data Spliting

**Pada projek ini saya menggunakan split data dengan rasio 80:20**
"""

X = data.drop(['Id','Outcome'], axis=1)   # Menghapus kolom Id dan Outcome dari fitur
y = data["Outcome"]    # Variabel target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

# Menampilkan jumlah data pada training dan testing set

print(f'Total nilai di train: {len(X_train)}')
print(f'Total nilai di test: {len(X_test)}')

data.info()

# Menampilkan jumlah data pada training

print("Nilai 0 pada y = ",(y_train == 0).sum())
print("Nilai 1 pada y = ",(y_train == 1).sum())

"""## SMOTE

Kita lihat sebelumnya, karena data training dengan target Outcome = 1 dan target Outcome = 0 berbeda cukup jauh, maka saya menggunakan SMOTE untuk menyeimbangkan datanya
"""

# SMOTE (Synthetic Minority Oversampling Technique)

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

print("Distribusi sebelum SMOTE:", y_train.value_counts())
print("Distribusi setelah SMOTE:", pd.Series(y_resampled).value_counts())

"""## Standardisasi Fitur

Standardisasi Fitur untuk digunakan pada beberapa model (SVM dan KNN).
"""

# Standardisasi Fitur

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_resampled)
X_test_scaled = scaler.transform(X_test)

"""# Train Model

Setelah melakukan data preparation, Selanjutnya adalah melatih model untuk melakukan prediksi terhadap penyakit diabetes berdasarkan riwayat kesehatan

## Random Forest
"""

# Menyimpan hasil evaluasi

results = []

"""Melatih model Random Forest"""

# Melatih model Random Forest

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_resampled, y_resampled)

"""Prediksi & evaluasi"""

# Prediksi & evaluasi

y_pred_rf = rf_classifier.predict(X_test)

"""Menyimpan Hasil Evaluasi Model"""

# Menyimpan Hasil Evaluasi Model

results.append({
    "Model": "Random Forest",
    "Accuracy": accuracy_score(y_test, y_pred_rf),
    "F1-Score": f1_score(y_test, y_pred_rf),
    "Recall": recall_score(y_test, y_pred_rf)
})

"""Membuat Confusion Matrix"""

# Membuat Confusion Matrix

cm = confusion_matrix(y_test, y_pred_cat)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["TIDAK DIABETES", "DIABETES"])
disp.plot()

"""Berdasarkan confusion matrix diatas:

- 360 responden diklasifikasikan benar sebagai TIDAK DIABETES (True Negative).
- 178 responden diklasifikasikan benar sebagai DIABETES (True Positive).
- 7 responden diklasifikasikan salah sebagai DIABETES, padahal sebenarnya TIDAK DIABETES (False Positive).
- 9 responden diklasifikasikan salah sebagai TIDAK DIABETES, padahal sebenarnya DIABETES (False Negative).

## Decision Tree

Melatih model Decision Tree
"""

# Melatih model Decision Tree

dt_model = DecisionTreeClassifier()
dt_model.fit(X_resampled, y_resampled)

"""Prediksi & evaluasi"""

# Prediksi & evaluasi
y_pred_dt = dt_model.predict(X_test_scaled)

"""Menyimpan Hasil Evaluasi Model"""

# Menyimpan Hasil Evaluasi Model

results.append({
    "Model": "Decision Tree",
    "Accuracy": accuracy_score(y_test, y_pred_dt),
    "F1-Score": f1_score(y_test, y_pred_dt),
    "Recall": recall_score(y_test, y_pred_dt)
})

"""Membuat Confusion Matrix"""

# Membuat Confusion Matrix

cm = confusion_matrix(y_test, y_pred_dt)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["TIDAK DIABETES", "DIABETES"])
disp.plot()

"""Berdasarkan confusion matrix diatas:

- 320 responden diklasifikasikan benar sebagai TIDAK DIABETES (True Negative).
- 63 responden diklasifikasikan benar sebagai DIABETES (True Positive).
- 47 responden diklasifikasikan salah sebagai DIABETES, padahal sebenarnya TIDAK DIABETES (False Positive).
- 124 responden diklasifikasikan salah sebagai TIDAK DIABETES, padahal sebenarnya DIABETES (False Negative).

## AdaBoosting

Melatih model AdaBoosting
"""

# Melatih model AdaBoosting

ada_model_dt = AdaBoostClassifier(estimator= dt_model, n_estimators=50, random_state=42)
ada_model_dt.fit(X_train, y_train)

"""Prediksi & evaluasi"""

# Prediksi & evaluasi

y_pred_ada = ada_model_dt.predict(X_test)

"""Menyimpan Hasil Evaluasi Model"""

# Menyimpan Hasil Evaluasi Model

results.append({
    "Model": "AdaBoosting",
    "Accuracy": accuracy_score(y_test, y_pred_ada),
    "F1-Score": f1_score(y_test, y_pred_ada),
    "Recall": recall_score(y_test, y_pred_ada)
})

"""Membuat Confusion Matrix"""

# Membuat Confusion Matrix

cm = confusion_matrix(y_test, y_pred_ada)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["TIDAK DIABETES", "DIABETES"])
disp.plot()

"""Berdasarkan confusion matrix diatas:

- 365 responden diklasifikasikan benar sebagai TIDAK DIABETES (True Negative).
- 180 responden diklasifikasikan benar sebagai DIABETES (True Positive).
- 2 responden diklasifikasikan salah sebagai DIABETES, padahal sebenarnya TIDAK DIABETES (False Positive).
- 7 responden diklasifikasikan salah sebagai TIDAK DIABETES, padahal sebenarnya DIABETES (False Negative).

## SVM

Melatih model SVM
"""

# Melatih model SVM
svm_model = SVC(kernel='rbf', C=1, gamma='scale', random_state=42)
svm_model.fit(X_train_scaled, y_resampled)

"""Prediksi & evaluasi"""

# Prediksi & evaluasi
y_pred_svm = svm_model.predict(X_test_scaled)

"""Menyimpan Hasil Evaluasi Model"""

# Menyimpan Hasil Evaluasi Model

results.append({
    "Model": "SVM",
    "Accuracy": accuracy_score(y_test, y_pred_svm),
    "F1-Score": f1_score(y_test, y_pred_svm),
    "Recall": recall_score(y_test, y_pred_svm)
})

"""Membuat Confusion Matrix"""

# Membuat Confusion Matrix

cm = confusion_matrix(y_test, y_pred_svm)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["TIDAK DIABETES", "DIABETES"])
disp.plot()

"""Berdasarkan confusion matrix diatas:

- 311 responden diklasifikasikan benar sebagai TIDAK DIABETES (True Negative).
- 151 responden diklasifikasikan benar sebagai DIABETES (True Positive).
- 56 responden diklasifikasikan salah sebagai DIABETES, padahal sebenarnya TIDAK DIABETES (False Positive).
- 36 responden diklasifikasikan salah sebagai TIDAK DIABETES, padahal sebenarnya DIABETES (False Negative).

## KNN

Melatih model KNN
"""

# Melatih model KNN

knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train_scaled, y_resampled)

"""Prediksi & evaluasi"""

# Prediksi & evaluasi

y_pred_knn = knn_model.predict(X_test_scaled)

"""Menyimpan Hasil Evaluasi Model"""

# Menyimpan Hasil Evaluasi Model

results.append({
    "Model": "KNN",
    "Accuracy": accuracy_score(y_test, y_pred_knn),
    "F1-Score": f1_score(y_test, y_pred_knn),
    "Recall": recall_score(y_test, y_pred_knn)
})

"""Membuat Confusion Matrix"""

# Membuat Confusion Matrix

cm = confusion_matrix(y_test, y_pred_knn)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["TIDAK DIABETES", "DIABETES"])
disp.plot()

"""Berdasarkan confusion matrix diatas:

- 313 responden diklasifikasikan benar sebagai TIDAK DIABETES (True Negative).
- 169 responden diklasifikasikan benar sebagai DIABETES (True Positive).
- 54 responden diklasifikasikan salah sebagai DIABETES, padahal sebenarnya TIDAK DIABETES (False Positive).
- 18 responden diklasifikasikan salah sebagai TIDAK DIABETES, padahal sebenarnya DIABETES (False Negative).

# Evaluasi Model

Menampilkan evaluasi model
"""

# Menampilkan evaluasi model

results_df = pd.DataFrame(results)
print(results_df)

"""Kesimpulan Akhir :
- Berdasarkan data yang diperolah, menunjukan Fitur utama yang memengaruhi kemungkinan diabetes adalah Glucose, BMI, Age, dan Pregnancies. ke-4 faktor ini sangat berpengaruh pada perhitungan prediksi diabetes.
- Setelah menguji data menggunakan 5 model machine learning, Model AdaBoosting memberikan performa terbaik dan dapat diandalkan untuk klasifikasi kasus diabetes dibandingkan model lainnya berdasarkan skor akurasi, skor F1, dan jumlah kesalahan klasifikasi yang paling sedikit.
- Model ini dapat digunakan untuk membantu pengambilan keputusan medis awal, terutama pada tahap skrining atau pencegahan.
"""